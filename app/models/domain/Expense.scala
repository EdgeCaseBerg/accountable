package models.domain

import java.text.{ NumberFormat, DateFormat }
import java.time.{ Instant, ZoneId, ZonedDateTime }
import java.time.format.DateTimeFormatter
import java.util.UUID

/** An Expense is just a record of spending something at some time
 *
 *  @param amountInCents The amount spent, in USD Cents
 *  @param name An identifier
 *  @param date The UTC Epoch timestamp (in seconds)
 *  @param expenseId A UUID uniquely identifying this transaction. Optional parameter, a randomUUID will be generated by default
 */
case class Expense(val amountInCents: Long, val name: String, val date: Long, val expenseId: UUID = UUID.randomUUID()) {

	/** Override toString method for fun
	 *
	 *  Overriding the toString method in order to have fun with the java.time libraries
	 *  and to format the Expense in a more human readable form.
	 */
	override def toString = {
		val moneyFormat = NumberFormat.getCurrencyInstance()
		val formatedAmountInCurrency = moneyFormat.format(amountInCents / 100.0)
		val localTime = ZonedDateTime.ofInstant(Instant.ofEpochSecond(date), ZoneId.systemDefault)
		val formattedLocalTime = DateTimeFormatter.ISO_LOCAL_DATE.format(localTime)
		"(ID: %s,\tDate: %s,\tName: %s,\tAmount: %s)".format(expenseId, formattedLocalTime, name, formatedAmountInCurrency)
	}
}
